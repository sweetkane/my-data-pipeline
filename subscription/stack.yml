AWSTemplateFormatVersion: '2010-09-09'
Description: Robonews Subscription Stack

Parameters:
  BucketName:
    Type: String
    Description: Name of the Robonews bucket
  ConfirmLambdaName:
    Type: String
    Description: Name of the confirmation lambda
  SubscribeLambdaName:
    Type: String
    Description: Name of the subscribe lambda
  UnsubscribeLambdaName:
    Type: String
    Description: Name of the unsubscribe lambda
  EncryptionKeyId:
    Type: String
    Description: Id of the KMS key used to encrypt/decrypt unsubscribe URLs
  Tag:
    Type: String
    Description: Random UUID tag to force update to lambda code
  MailgunApiKey:
    Type: String
    Description: API key for mailgun email service

Resources:
  UserEmailsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserEmails
      AttributeDefinitions:
        - AttributeName: Email
          AttributeType: S
      KeySchema:
        - AttributeName: Email
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: LambdaSESPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: Allow
                  Action:
                    - "ses:SendEmail"
                    - "ses:SendRawEmail"
                    - "ses:SendTemplatedEmail"
                  Resource: "*"
          - PolicyName: LambdaDynamoDBReadPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: "Allow"
                  Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:DeleteItem"
                  Resource: !GetAtt UserEmailsTable.Arn
          - PolicyName: LambdaKMSPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'kms:Decrypt'
                    - 'kms:Encrypt'
                  Resource: '*'

  ConfirmLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref ConfirmLambdaName
      Handler: subscription.confirm_lambda.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.11
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Sub "robonews/subscription/${ConfirmLambdaName}-${Tag}.zip"
      Environment:
        Variables:
          MAILGUN_API_KEY: !Ref MailgunApiKey
          KMS_KEY_ID: !Ref EncryptionKeyId
          SUBSCRIBE_LAMBDA_URL: !GetAtt SubscribeLambdaUrl.FunctionUrl

  SubscribeLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref SubscribeLambdaName
      Handler: subscription.subscribe_lambda.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.11
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Sub "robonews/subscription/${SubscribeLambdaName}-${Tag}.zip"

  UnsubscribeLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref UnsubscribeLambdaName
      Handler: subscription.unsubscribe_lambda.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.11
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Sub "robonews/subscription/${UnsubscribeLambdaName}-${Tag}.zip"

  ConfirmLambdaUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt ConfirmLambdaFunction.Arn
      Cors:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"

  SubscribeLambdaUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt SubscribeLambdaFunction.Arn
      Cors:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"

  UnsubscribeLambdaUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt UnsubscribeLambdaFunction.Arn
      Cors:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"

  ConfirmUrlPermission:
     Type: AWS::Lambda::Permission
     Properties:
       FunctionName: !Ref ConfirmLambdaFunction
       FunctionUrlAuthType: 'NONE'
       Action: lambda:InvokeFunctionUrl
       Principal: '*'

  SubscribeUrlPermission:
     Type: AWS::Lambda::Permission
     Properties:
       FunctionName: !Ref SubscribeLambdaFunction
       FunctionUrlAuthType: 'NONE'
       Action: lambda:InvokeFunctionUrl
       Principal: '*'

  UnsubscribeUrlPermission:
     Type: AWS::Lambda::Permission
     Properties:
       FunctionName: !Ref UnsubscribeLambdaFunction
       FunctionUrlAuthType: 'NONE'
       Action: lambda:InvokeFunctionUrl
       Principal: '*'

Outputs:
  UserEmailsTableArn:
    Description: "The ARN of the DynamoDB UserEmails table"
    Value: !GetAtt UserEmailsTable.Arn
    Export:
      Name: UserEmailsTableArn

  UnsubscribeLambdaUrlOutput:
    Description: "The URL of the unsubscribe function"
    Value: !GetAtt UnsubscribeLambdaUrl.FunctionUrl
    Export:
      Name: UnsubscribeLambdaUrl
